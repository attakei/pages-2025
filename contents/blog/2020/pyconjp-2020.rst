=========================================
PyCon JP 2020 Online に登壇者参加しました
=========================================

.. post:: 2020-08-30
   :category: Tech
   :tags: Cloud Run,Python,Reveal.js,FastAPI,技術イベント,登壇,
   :redirect: blog/2020/pycon-2020/speaker

個人でお試して書いてた知見周りをCfPに出したら、繰り上がり採択されました。
結果として、2年連続で登壇機会をいただけました。

概要
====

Cloud Runのトライアルでいろいろ試している過程で、
SlackのSlashCommandsをFastAPIで作ったので、
その過程で整理した知見についての話をしてました。

前週まで
========

JTF2020に引き続き、今回もリハーサルが設けられました。

配信チーム側もですが、自分の発表体制も若干の改善が入ったので、
追加の機材をベースとした画面共有テストをするいい機会になりました。

ありがたいことです。

前日まで
========

今回繰り上がり採択=最初の採択通知はウェイティング行き のため、
ちょっと油断しててスライド作成がかなりタイトになってしまいました。

最終的にはCfPの時点で話す予定だったことをなんとか詰め込めはしたので、
なんとかなったと言っていいと信じたいです。

当日
====

最終的なスライド自体は午後イチぐらいでコミットまで終わりました。良かった。
とはいえ、前回の経験が活ききれてないのが少々無念ではあります。

発表配信していたときの体制は、

* Thinkpadのディスプレイを画面共有に利用
* Zoomの状況確認とスピーカーノートを外付けディスプレイに配置
* なるべくスピーカーノートを見つつトーク

JTFと違いZoomにも聴講者がいたのですが、結局顔は出てこないのでリアクションは分かりづらいですよね。
これはどうにもならなそうなので、慣れないとだめですね。

Twitterの反応への反応
=====================

FastAPIは、starletteを土台にして、
APIサーバーとして「あるといい」機能が標準でちょくちょく用意されているのが本当にありがたいですね。
特にTypeHintingをガッツリ活用したリクエストバリデーションは、API開発の本質に集中できるので便利です。

発表時にもウェイトをかけてたBackground Taskについても、特に追加でなにかを用意せずに、
あれができるのは、「APIとしての受け口」と「バックエンドだけが関心を持てばいい処理」をきれいに分離してくれる良い機能だと思ってます。

Cloud RunはMin instances機能の予定を知ることができました。
初動の遅さはこれで解決できるんですけど、今度その場合の請求計算が気になります。

パーティ
========

前夜祭とアフターパーティのどちらにも参加してました。
Zoomのブレイクアウト機能を使って、適当に割り振られて参加者と話をする形式でした。

自分はどうしても人との会話が億劫になるタイプで、
普段のオフライン懇親会でも親しくなった人としか話さないことが多いのですが、
こういった強制力のある仕組みはきっかけ(というか勢い)になるので、
効果がありますね。
